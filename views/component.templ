package views

import (
    "fmt"
	"github.com/AngelVI13/foos/game"
	"github.com/AngelVI13/foos/routes"
)


templ InlineEditBtn(url string) {
<a class="m-1 link-warning" hx-get={url} hx-trigger="click" hx-target="closest tr" hx-swap="outerHTML">
    @EditIcon()
</a>
}

templ InlineSaveBtn(url string) {
<a class="m-1 link-success" hx-post={url} hx-trigger="click" hx-include="closest tr" hx-target="closest tr" hx-swap="outerHTML"> 
    @ConfirmIcon()
</a>
}

templ InlineCancelBtn(url string) {
<a class="m-1 link-danger" hx-get={url} hx-trigger="click" hx-target="closest tr" hx-swap="outerHTML">
    @CancelIcon()
</a>
}

templ Menu() {
<div class="column">
    <div class="menu w-75">
        <h3>Menu</h3>
        <a href={routes.NewTournamentUrl} class="btn btn-dark">Generate Teams and Start New Tournament</a>
        <a href={routes.IndexUrl} class="btn btn-dark">Enter New Players</a>
        @Timer()
    </div>
</div>
}

templ Rounds(rounds game.Rounds, standings []*game.Team, stats []*game.Stats) {
    @Menu()

    for _, round := range rounds.All {
        @Bracket(round, rounds.CurrentRound)
    }

    @Standings(standings)
    @AllTimeStats(stats)
}

templ TeamRow(team *game.Team, url string, round int) {
<tr class={templ.KV("winner", team.Result(round) == game.Win) }
    if team.CurrentMatch() == round {
        hx-get={url} hx-trigger="click" hx-target="closest tr" hx-swap="outerHTML"
    }
    >
    <td>{ team.String() }</td>
    <td id="score">{ fmt.Sprintf("%d", team.ScoreForMatch(round)) }</td>
</tr>
}

templ TeamRowUpdate(teamName, url string, value int) {
<tr hx-post={url} hx-trigger="keyup[keyCode==13] from:body" hx-include="closest tr" hx-target="closest tr" hx-swap="outerHTML">
    <td>{ teamName }</td>
    <td> <input id="scoreUpdate" class="form-control" value={fmt.Sprint(value)} type="text" name="score" maxlength="2" size="2" /> </td>
</tr>
}

templ Standings(teams []*game.Team) {
<div class="column">
    <h3>Standings</h3>
    <table class="table table-hover table-dark table-border table-responsive">
        <thead>
            <td>#</td>
            <td>Name</td>
            <td class="tcenter">Score</td>
            <td class="tcenter">Wins</td>
            <td class="tcenter">Losses</td>
        </thead>
        <tbody>
            for i, team := range teams {
                <tr>
                    <td>{ fmt.Sprintf("%d", (i*2)+1) }</td>
                    <td>{ team.Player1 }</td>
                    <td class="tcenter">{ fmt.Sprintf("%d", team.AllScores()) }</td>
                    <td class="tcenter">{ fmt.Sprintf("%d", team.Wins()) }</td>
                    <td class="tcenter">{ fmt.Sprintf("%d", team.Losses()) }</td>
                </tr>
                <tr>
                    <td>{ fmt.Sprintf("%d", (i*2)+2) }</td>
                    <td>{ team.Player2 }</td>
                    <td class="tcenter">{ fmt.Sprintf("%d", team.AllScores()) }</td>
                    <td class="tcenter">{ fmt.Sprintf("%d", team.Wins()) }</td>
                    <td class="tcenter">{ fmt.Sprintf("%d", team.Losses()) }</td>
                </tr>
            }
        </tbody>
    </table>
</div>
}

templ AllTimeStats(stats []*game.Stats) {
<div class="column">
    <h3>Season Stats</h3>
    <table class="table table-hover table-dark table-border table-responsive">
        <thead>
            <td>#</td>
            <td>Name</td>
            <td class="tcenter">Score</td>
            <td class="tcenter">Wins</td>
            <td class="tcenter">Losses</td>
        </thead>
        <tbody>
            for i, stat := range stats {
                <tr>
                    <td>{ fmt.Sprintf("%d", i+1) }</td>
                    <td>{ stat.Player }</td>
                    <td class="tcenter">{ fmt.Sprint(stat.Score) }</td>
                    <td class="tcenter">{ fmt.Sprint(stat.Won) }</td>
                    <td class="tcenter">{ fmt.Sprint(stat.Lost) }</td>
                </tr>
            }
        </tbody>
    </table>
</div>
}

templ Bracket(round game.Round, currentRound int) {
<div class="column">
    <h3>{ round.Name }</h3>
    for i, match := range round.Matches {
        <table class="table table-hover table-dark table-border table-responsive w-75">
            <tbody>
                for i, team := range match.Teams() {
                    @TeamRow(team, routes.MakeMatchUpdateUrl(&match, i+1), round.Id)
                }
            </tbody>
        </table>
        if i == 0 && round.Id > 0 {
            <br/>
            <h4>Loser's matches</h4>
        }
    }
    if round.Id == currentRound {
    <span class="info-span w-75">Click on a row to edit scores & press enter to save.</span>
    <a href={routes.TournamentTableEndRoundUrl} class="end-round btn btn-warning">End Round</a>
    }
</div>
}


